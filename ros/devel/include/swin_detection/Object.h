// Generated by gencpp from file swin_detection/Object.msg
// DO NOT EDIT!


#ifndef SWIN_DETECTION_MESSAGE_OBJECT_H
#define SWIN_DETECTION_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/Image.h>

namespace swin_detection
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : time()
    , place()
    , name()
    , category_id(0)
    , id(0)
    , cropped_image()
    , image_rgb()
    , bbox()
    , segm()
    , score(0.0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , place(_alloc)
    , name(_alloc)
    , category_id(0)
    , id(0)
    , cropped_image(_alloc)
    , image_rgb(_alloc)
    , bbox(_alloc)
    , segm(_alloc)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _place_type;
  _place_type place;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint16_t _category_id_type;
  _category_id_type category_id;

   typedef uint16_t _id_type;
  _id_type id;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _cropped_image_type;
  _cropped_image_type cropped_image;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_rgb_type;
  _image_rgb_type image_rgb;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _bbox_type;
  _bbox_type bbox;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _segm_type;
  _segm_type segm;

   typedef double _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::swin_detection::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swin_detection::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::swin_detection::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::swin_detection::Object > ObjectPtr;
typedef boost::shared_ptr< ::swin_detection::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swin_detection::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swin_detection::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swin_detection::Object_<ContainerAllocator1> & lhs, const ::swin_detection::Object_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.place == rhs.place &&
    lhs.name == rhs.name &&
    lhs.category_id == rhs.category_id &&
    lhs.id == rhs.id &&
    lhs.cropped_image == rhs.cropped_image &&
    lhs.image_rgb == rhs.image_rgb &&
    lhs.bbox == rhs.bbox &&
    lhs.segm == rhs.segm &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swin_detection::Object_<ContainerAllocator1> & lhs, const ::swin_detection::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swin_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swin_detection::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swin_detection::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swin_detection::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swin_detection::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swin_detection::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swin_detection::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swin_detection::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46fa9eed002d6f2c7842f29306634525";
  }

  static const char* value(const ::swin_detection::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46fa9eed002d6f2cULL;
  static const uint64_t static_value2 = 0x7842f29306634525ULL;
};

template<class ContainerAllocator>
struct DataType< ::swin_detection::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swin_detection/Object";
  }

  static const char* value(const ::swin_detection::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swin_detection::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string time\n"
"string place\n"
"string name\n"
"uint16 category_id\n"
"uint16 id\n"
"sensor_msgs/Image cropped_image\n"
"sensor_msgs/Image image_rgb\n"
"float64[] bbox\n"
"float64[] segm\n"
"float64 score\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::swin_detection::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swin_detection::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.place);
      stream.next(m.name);
      stream.next(m.category_id);
      stream.next(m.id);
      stream.next(m.cropped_image);
      stream.next(m.image_rgb);
      stream.next(m.bbox);
      stream.next(m.segm);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swin_detection::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swin_detection::Object_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.time);
    s << indent << "place: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.place);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "category_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.category_id);
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "cropped_image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.cropped_image);
    s << indent << "image_rgb: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image_rgb);
    s << indent << "bbox[]" << std::endl;
    for (size_t i = 0; i < v.bbox.size(); ++i)
    {
      s << indent << "  bbox[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.bbox[i]);
    }
    s << indent << "segm[]" << std::endl;
    for (size_t i = 0; i < v.segm.size(); ++i)
    {
      s << indent << "  segm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.segm[i]);
    }
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWIN_DETECTION_MESSAGE_OBJECT_H
